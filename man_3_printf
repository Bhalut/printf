.TH PRINTF 3 "18 March 2019" "GNU" "Linux Programmer's Manual"
.SH NAME
printf
.SH SYNOPSIS
.nf
.B #include "holberton.h"
.PP
.BI "int _printf(const char *" format ", ...);"
.fi
.PP
.ad
.PD
.SH DESCRIPTION
The function
.BR _printf ()
produce output according to a
.I format
as described below.
The function
.BR _printf ()
write output to
.IR stdout ,
the standard output stream;

This function write the output under the control of a
.I format
string that specifies how subsequent arguments (or arguments accessed via  the  variable-length argument facilities of
.BR stdarg(3))
are converted for output.

.SS Field width
An optional decimal digit string (with nonzero first digit) specifying
a minimum field width.
If the converted value has fewer characters
than the field width, it will be padded with spaces on the left
(or right, if the left-adjustment flag has been given).
Instead of a decimal digit string one may write "*" or "*m$"
(for some decimal integer \fIm\fP) to specify that the field width
is given in the next argument, or in the \fIm\fP-th argument, respectively,
which must be of type
.IR int .
A negative field width is taken as a \(aq\-\(aq flag followed by a
positive field width.
In no case does a nonexistent or small field width cause truncation of a
field; if the result of a conversion is wider than the field width, the
field is expanded to contain the conversion result.
.SS Precision
An optional precision, in the form of a period (\(aq.\(aq)  followed by an
optional decimal digit string.
Instead of a decimal digit string one may write "*" or "*m$"
(for some decimal integer \fIm\fP) to specify that the precision
is given in the next argument, or in the \fIm\fP-th argument, respectively,
which must be of type
.IR int .
If the precision is given as just \(aq.\(aq, the precision is taken to
be zero.
A negative precision is taken as if the precision were omitted.
This gives the minimum number of digits to appear for
.BR d
and
.BR i
conversions, the number of digits to appear after the radix character and to be printed from a string for
.B s
conversions.

.SS Length modifier
Here, "integer conversion" stands for
.BR d
or
.BR i
conversion
.\"
.SS Conversion specifiers
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:
.TP
.BR d ", " i
The
.I int
argument is converted to signed decimal notation.
The precision, if any, gives the minimum number of digits
that must appear; if the converted value requires fewer digits, it is
padded on the left with zeros.
The default precision is 1.
When 0 is printed with an explicit precision 0, the output is empty.
.TP
.B c
If no
.B l
modifier is present, the
.I int
argument is converted to an
.IR "unsigned char" ,
and the resulting character is written.
If an
.B l
modifier is present, prints it
.TP
.B s
If no
.B l
modifier is present: the
.I "const char\ *"
argument is expected to be a pointer to an array of character type (pointer
to a string).
Characters from the array are written up to (but not
including) a terminating null byte (\(aq\e0\(aq);
if a precision is specified, no more than the number specified
are written.
If a precision is given, no null byte need be present;
if the precision is not specified, or is greater than the size of the
array, the array must contain a terminating null byte.
.IP

.SH RETURN VALUE
Upon successful return, these functions return the number of characters
printed (excluding the null byte used to end output to strings).
.PP
If an output error is encountered, a negative value is returned.

.SH EXAMPLE
.PP
.EX
#include <stdio.h>
#include "holberton.h"
int
make_message(const char *format, ...)
{
    va_list list;
    int count = 0;

    va_start(list, format);
    count =	   get_match_func(format, list);
    va_end(list);
    return (count);
}
.EE
.PP
.SH SEE ALSO
.BR printf (3),
.BR putchar (1)
.SH BUGS
No known bugs.
.SH AUTHOR
Erika Osorio and Abdel Mejia